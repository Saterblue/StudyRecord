register:

AX:Accumulator
BX:Base
CX:Count
DX:Data
SI:Source Index
DI:Destination Index
SP:Stack Pointer
IP:Instruction Pointer
BP:Base Pointer
ES:Extra Segment
CS:Code Segment
SS:Stack Segment
DS:Data Segment

        15  14  13  12  11  10    9   8   7   6   5   4   3   2   1   0
FLAGS:  X   X   X   X   O   D     I   T   S   Z   X   Ac  X   P   X   C

                                                
                                                                                1  /  0
O:Overflow flag                                                          OF:    VO / NV
D:Direction flag                                                         DF:    DN / UP
I:Interrupt flag
T:Trap flag
S:Sign flag                                                              SF:    NG / PL
Z:Zero flag                                                              ZF:    ZR / NZ
Ac:Auxiliary carry flag
P:Parity flag                                                            PF:    PE / PO
C:Carry flag                                                             CF:    CY / NC

X:Not used


**********************************************************************************
Command:

************************************************************************************************************************ 
push ax                 //1. SP = SP-2   2. SS:[SP] = ax      
pop ax                  //1. ax = SS:[SP]   2.SP = SP+2
pushf                   //push Flag value to the stack 
popf                    //statck value pop to the Flag

cmd: loop               //loop CX times command between: token ~ loop token  ||  this example: loop n times >> add ax,bx

        mov cx,n        
token:  add ax,bx
        loop token      

cmd: call               //1. push IP  2. jmp token

        mov ax,bx
        call token      
        mov bx,dx
token:  mov bx,ax       
        ....

 cmd: call far ptr       //1. push CS  2. push IP  3. jmp token      
 
        call far ptr token      
        mov bx,dx
token:  mov bx,ax 

cmd:  ret                //pop IP

        mov ax,bx
        ret            

cmd:  retf              //1. pop IP   2. pop CS

        mov ax,bx
        retf            
        
cmd:  int N             //1. pushf   2. push CS   3. push IP   4. mov CS,0000:[N*4+2]   5. mov IP,0000:[N*4]

cmd:  iret              //1. pop IP  2. pop CS  3. popf

        
        
        
************************************************************************************************************************

mov ax,bx       //ax = bx
add ax,bx       //ax += bx
sub bx,ax       //bx -= ax
adc ax,bx       //ax = ax + bx + CF(Flag)
sbb ax,bx       //ax = ax - bx - CF
div bl          //ax=ax/bl  dx=ax%bl            bl is 8bit,div 8bit need use 16bit ax
div bx          //ax=dxax/bx  dx=dxax%bx        bx is 16bit,div 16bit need use 32bit, ax is the Low ,dx is the High.
mul bx          //ax *= bx

cld             //set DF=0
std             //set DF=1
movsb           //ES*16+DI = DS*16 +SI (byte)   if(DF == 0){inc DI  inc SI} else if(DF == 1){dec DI,dec SI}
movsw           //ES*16+DI = DS*16 +SI (word)   if(DF == 0){add DI,2  add SI,2} else if(DF == 1){sub DI,2  sub SI,2}  
rep movsb       //loop cx times movsb
rep movsw       //loop cx times movsw

                
jmp address    //jump to address   most likely:  ip = adrress
jcxz address    //if( CX == 0 ) {jump to address}
je   address    //if( ZF == 1 ) {jump to address}
jne  address    //if( ZF != 1 ) {jump to address}
jb   address    //if( CF == 1 ) {jump to address}
jnb  address    //if( CF == 0 ) {jump to address}
ja   address    //if( CF == 0 && ZF == 0) {jump to address}
jna  address    //if( CF == 1 || ZF == 1) {jump to address}


