register:

AX:Accumulator
BX:Base
CX:Count
DX:Data
SI:Source Index
DI:Destination Index
SP:Stack Pointer
IP:Instruction Pointer
BP:Base Pointer
ES:Extra Segment
CS:Code Segment
SS:Stack Segment
DS:Data Segment

        15  14  13  12  11  10    9   8   7   6   5   4   3   2   1   0
FLAGS:  X   X   X   X   O   D     I   T   S   Z   X   Ac  X   P   X   C

O:Overflow flag
D:Direction flag
I:Interrupt flag
T:Trap flag
S:Sign flag
Z:Zero flag
Ac:Auxiliary carry flag
P:Parity flag
C:Carry flag

X:Not used


**********************************************************************************
Command:

mov ax,bx       //ax = bx
add ax,bx       //ax += bx
sub bx,ax       //bx -= ax
adc ax,bx       //ax = ax + bx + CF(Flag)
sbb ax,bx       //ax = ax - bx - CF

*************************   
        mov cx,n
token:  add ax,bx
        loop token      //loop CX times command between: token ~ loop token  ||  this example: loop n times >> add ax,bx
*************************


movsb           //ES*16+DI = DS*16 +SI (byte)   if(DF == 0){inc DI  inc SI} else if(DF == 1){dec DI,dec SI}
movsw           //ES*16+DI = DS*16 +SI (word)   if(DF == 0){add DI,2  add SI,2} else if(DF == 1){sub DI,2  sub SI,2}  
rep movsb       //loop cx times movsb
rep movsw       //loop cx times movsw
                
jmp address    //jump to address
jcxz address    //if( CX == 0 ) {jump to address}
je   address    //if( ZF == 1 ) {jump to address}
jne  address    //if( ZF != 1 ) {jump to address}
jb   address    //if( CF == 1 ) {jump to address}
jnb  address    //if( CF == 0 ) {jump to address}
ja   address    //if( CF == 0 && ZF == 0) {jump to address}
jna  address    //if( CF == 1 || ZF == 1) {jump to address}


